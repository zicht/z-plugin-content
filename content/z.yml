# @version ">=2.0"

# Content options
content:
    # Dirs that contain user content (i.e. uploaded files and such)
    dir:            [ 'web/media' ]
    exclude:        [ "cache" ]
    local:
        db:
            host: mysql.zicht.intern
            user: dev

tasks:
    content.files.pull:
        help: |
            Sync remote with local content folder.

            Use the content.dir to define the folder to sync and
            content.exlude for exlusion of folder within that folder.

            The --rsync-flags flag can be used to overwrite the rsync flags, so for example:

            z content:files:pull --rsync-flags="-ru --delete --inplace" production

            will genertae something like:

            rsync -ru --delete --inplace example@example.com:/home/example/web/media/ ./web/media/
        args:
            target_env: ?
        opts:
            rsync_flags:
        flags:
            simulate: false
            delete: false
        do: |
            @(for d in content.dir)
                $(fmt.cmd.rsync(fmt.path(sprintf("%s:%s", envs[target_env].ssh, envs[target_env].root), d),fmt.path(envs.local.root, d)))

    content.files.push:
        help: |
            Sync local with remote content folder.

            Use the content.dir to define the folder to sync and
            content.exlude for exlusion of folder within that folder.

            The --rsync-flags flag can be used to overwrite the rsync flags, so for example:

            z content:files:push --rsync-flags="-ru --delete --inplace" production

            will genertae something like:

            rsync -ru --delete --inplace ./web/media/ example@example.com:/home/example/web/media/
        args:
            target_env: ?
        opts:
            rsync_flags:
        flags:
            simulate: false
            delete: false
        do: |
            @(for d in content.dir)
                $(fmt.cmd.rsync(fmt.path(envs.local.root, d), fmt.path(sprintf("%s:%s", envs[target_env].ssh, envs[target_env].root), d)))

    content.db.pull:
        help: |
            Pull remote database/table to local database/table.

            If flag <info>nodrop</info> is given, the database won't be dropped. Otherwise the local database will be dropped and recreated (unless the table or backup flag is provided).

            The <info>where</info> and <info>table</info> flag makes it posible to only dump a certain table that match the where statement (see man mysqldump).

            When the backup flag is provided it will only create a file of the remote database in this folder.
        flags:
            drop: true
            backup: false
        opts:
            table: false
            where: false
            file: false

            local_user: content.local.db.user
            local_host: content.local.db.host
            local_port:
            local_password:
        args:
            target_env: ?
            local_db: ? false
        do:
            - $(fmt.cmd.mysql_local_drop)
            - $(fmt.cmd.mysql_pull)
    content.db.push:
        help: |
            Push mysql dump file to remote database/table.

            When the dump flag is provided it will use a local mysqldump instead of file content.
        flags:
            backup: true
            from_dump: false
        opts:
            # used if the dump opt is provided
            table: false
            where: false
            local_user: content.local.db.user
            local_host: content.local.db.host
            local_port:
            local_password:
        opts:
            table: false

        args:
            target_env: ?
            arg: ? false
        do:
            - $(fmt.cmd.mysql_remote_backup)
            - $(fmt.cmd.mysql_push)