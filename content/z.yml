# @version ">=2.0"

# Content options
content:
    # Dirs that contain user content (i.e. uploaded files and such)
    dir:            [ 'web/media' ]
    exclude:        [ "cache" ]
    local:
        db:
            host: mysql.zicht.intern
            user: dev

tasks:
    content.files.pull:
        help: |
            Sync remote with local content folder.

            Use the content.dir to define the folder to sync and
            content.exlude for exlusion of folder within that folder.

            The --rsync-flags flag can be used to overwrite the rsync flags, so for example:

            z content:files:pull --rsync-flags="-ru --delete --inplace" production

            will generate something like:

            rsync -ru --delete --inplace example@example.com:/home/example/web/media/ ./web/media/
        args:
            target_env: ?
        opts:
            rsync_flags:
        flags:
            simulate: false
            delete: false
        do: |
            @(for d in content.dir)
                $(fmt.cmd.rsync(fmt.path(sprintf("%s:%s", envs[target_env].ssh, envs[target_env].root), d),fmt.path(envs.local.root, d)))

    content.files.push:
        help: |
            Sync local with remote content folder.

            Use the content.dir to define the folder to sync and
            content.exlude for exlusion of folder within that folder.

            The --rsync-flags flag can be used to overwrite the rsync flags, so for example:

            z content:files:push --rsync-flags="-ru --delete --inplace" production

            will generate something like:

            rsync -ru --delete --inplace ./web/media/ example@example.com:/home/example/web/media/
        args:
            target_env: ?
        opts:
            rsync_flags:
        flags:
            simulate: false
            delete: false
        do: |
            @(for d in content.dir)
                $(fmt.cmd.rsync(fmt.path(envs.local.root, d), fmt.path(sprintf("%s:%s", envs[target_env].ssh, envs[target_env].root), d)))

    content.db.pull:
        help: |
            Pull remote database/table to local database/table.

            If flag <info>nodrop</info> is given, the database won't be dropped. Otherwise the local database will be dropped and recreated (unless the table flag is provided).

            With the <info>where</info> and <info>table</info> flag is it posible to only dump a certain table that match the WHERE statement.
        flags:
            drop: true
        opts:
            table: false
            where: false
            file: false

            local_user: content.local.db.user
            local_host: content.local.db.host
            local_port:
            local_password:
        args:
            target_env: ?
            local_db: ? false
        do: $(fmt.mysql_pull)
    content.db.push:
         help: |
             Push local database/table to remote database/table.

             The backup flag (that is default true) will make a backup of the tables or database before it pushes the
             content to the given environment. See also the explain (--explain) flag.
         flags:
             backup: true
         opts:
             table: false
             where: false
             local_user: false
             local_host: false
             local_port: false
             local_password: false
         args:
             target_env: ?
             local_db: ? false
         do:
             - @(if backup != false) ssh $(envs[target_env].ssh) "mysqldump -Q --opt $(content.sql_where)$(envs[target_env].db) $(table ? table)| gzip -c -9" > $(fmt.sql_backup_file)
             - mysqldump $(fmt.local_mysql_args) $(table ? table) $(content.sql_where)| ssh $(envs[target_env].ssh) "mysql $(envs[target_env].db)"
